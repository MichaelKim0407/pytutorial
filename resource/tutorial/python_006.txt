@chapter(11) Files
@section(1) Opening and closing
@section(1.1) Opening
Files can be opened in python for reading and writing.

@usage(1):
{
open([36;1mname[0m, [36;1mmode[0m)
}

where [36;1mname[0m is the relative path of the file to be opened,
and [36;1mmode[0m defines how the file is opened.
A list of available modes is given below:

    mode    | meaning
    "r"     | Opens the file for reading. This is the default mode.
              Raises an error if the file does not exist.
    "w"     | Opens a new file for writing.
    "a"     | Opens a file for appending.
              Raises an error if the file does not exist.
    "b"     | Opens a file in binary mode (used as "rb", "wb" or "ab").
              This is useful when trying to open non-text files,
              as text mode ("r", "w" or "a") will change "\n"
              to system-specific values.

@eg(1):
{
>>> open("12345")

Traceback (most recent call last):
  File "<pyshell#0>", line 1, in <module>
    open("12345")
IOError: [Errno 2] No such file or directory: '12345'
>>> open("python.exe")
<open file 'python.exe', mode 'r' at 0x02F9C1D8>
>>> open("12345", "w")
<open file '12345', mode 'w' at 0x030BECD8>
}

@section(1.2) Closing
Files must be properly closed after its operations.

@usage(2):
{
[36;1mfile[0m.close()
}

@eg(2):
{
>>> f = open("README.txt")
>>> f
<open file 'README.txt', mode 'r' at 0x02F7C1D8>
>>> f.close()
>>> f
<closed file 'README.txt', mode 'r' at 0x02F7C1D8>
}

@section(1.3) The "with" keyword
Sometimes deciding where to call close() is not very easy, if your code has multiple paths, not to mention that there may be errors.

Python provides a convenient syntax so that all files opened this way is properly closed after exiting the context.

@usage(3):
{
with open([36;1mname[0m, [36;1mmode[0m) as [36;1mvar_name[0m:
    [33;7msuite[0m
}

where [36;1mvar_name[0m is the variable representing the opened file.

@eg(3):
{
>>> with open("README.txt") as f:
...     print f

<open file 'README.txt', mode 'r' at 0x02FCC1D8>
>>> f
<closed file 'README.txt', mode 'r' at 0x02FCC1D8>
}

@section(2) Reading and writing
@section(2.1) Reading
After a file is opened with mode "r", it can be read into a string:

@usage(4):
{
[36;1mfile[0m.read()
}

@eg(4):
{
>>> with open("temp.txt") as f:
...     s = f.read()

>>> s
'hello'
}

@section(2.2) Writing
After a file is opened with mode "w" or "a", it can be writen into:

@usage(5):
{
[36;1mfile[0m.write([36;1mcontent[0m)
}

@eg(5):
{
>>> with open("temp.txt", "w") as f:
...     f.write("goodbye")

>>> with open("temp.txt", "a") as f:
...     f.write("\nsee you")
}

@section(2.3) Advanced reading
Python provides multiple ways to read a file.

@usage(6):
{
[36;1mfile[0m.readlines()
}

will split the file into lines and return the result as a list.

@eg(6):
{
>>> with open("temp.txt") as f:
...     print(f.readlines())

['goodbye\n', 'see you']
}

@pause()

A file can be passed into a [35;1mfor[0m loop, and iterate through all lines.

@usage(7):
{
for [36;1mline[0m in [36;1mfile[0m:
    [33;7msuite[0m
}

@eg(7):
{
>>> with open("temp.txt") as f:
...     for line in f:
...         print(repr(line))

'goodbye\n'
'see you'
}

@section(3) Exercise

Print the content of m10_2.py, and count how many lines it has.
